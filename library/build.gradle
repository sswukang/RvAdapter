apply plugin: 'com.android.library'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'com.github.dcendents.android-maven'
group = 'com.github.sswukang'

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.2"

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 25
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    provided 'com.android.support:appcompat-v7:25.1.1'
    provided 'com.android.support:design:25.1.1'
    testCompile 'junit:junit:4.12'
}

// Bintray
Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())
bintray {
    //获取local.propertes的信息
    user = properties.getProperty("bintray.user")
    key = properties.getProperty("bintray.apikey")
    dryRun = false //[Default: false] Whether to run this as dry-run, without deploying
    publish = true //[Default: false] Whether version should be auto published after an upload
    override = false //[Default: false] Whether to override version artifacts already published
    //Package configuration. The plugin will use the repo and name properties to check if the package already exists. In that case, there's no need to configure the other package properties (like userOrg, desc, etc).
    pkg {
        //填入 bintray 上对应的 package 信息
        repo = 'maven'
        name = 'RvAdapter'
        userOrg = 'sswukang'
        //An optional organization name when the repo belongs to one of the user's orgs
        desc = 'what a fantastic package indeed!'
        websiteUrl = 'https://github.com/sswukang/RvAdapter'
        issueTrackerUrl = 'https://github.com/sswukang/RvAdapter/issues'
        vcsUrl = 'https://github.com/sswukang/RvAdapter.git'
        licenses = ['Apache-2.0']
        labels = ['gear', 'gore', 'gorilla']
        publicDownloadNumbers = true
        attributes = ['a': ['ay1', 'ay2'], 'b': ['bee'], c: 'cee']
        //Optional package-level attributes

        githubRepo = 'sswukang/RvAdapter' //Optional Github repository
        githubReleaseNotesFile = 'README.md' //Optional Github readme file

        //Optional version descriptor
        version {
            //Bintray logical version name
            name = '1.0'
            //Optional - Version-specific description'
            desc = '1.0 release'
            //Optional - Date of the version release. 2 possible values: date in the format of 'yyyy-MM-dd'T'HH:mm:ss.SSSZZ' OR a java.util.Date instance
            released = new Date()
            vcsTag = '1.3.0'
            attributes = ['gradle-plugin': 'com.use.less:com.use.less.gradle:gradle-useless-plugin']
//            //Optional version-level attributes
//            //Optional configuration for GPG signing
//            gpg {
//                sign = true //Determines whether to GPG sign the files. The default is false
//                passphrase = 'passphrase' //Optional. The passphrase for GPG signing'
//            }
//            //Optional configuration for Maven Central sync of the version
//            mavenCentralSync {
//                sync = true
//                //[Default: true] Determines whether to sync the version to Maven Central.
//                user = 'userToken' //OSS user token: mandatory
//                password = 'paasword' //OSS user password: mandatory
//                close = '1'
//                //Optional property. By default the staging repository is closed and artifacts are released to Maven Central. You can optionally turn this behaviour off (by puting 0 as value) and release the version manually.
//            }
        }
    }
}

/*--------------------- 增加注释文档(jitpack.io) ------------------------*/
// build a jar with source files
task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    failOnError false
    source = android.sourceSets.main.java.sourceFiles
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    classpath += configurations.compile
}

// build a jar with javadoc
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

task findConventions << {
    println project.getConvention()
}
