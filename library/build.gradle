apply plugin: 'com.android.library'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'com.github.dcendents.android-maven'
group = 'com.github.sswukang'

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.2"

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 25
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    provided 'com.android.support:appcompat-v7:25.1.1'
    provided 'com.android.support:design:25.1.1'
    testCompile 'junit:junit:4.12'
}

// Bintray
Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())
bintray {
    //获取local.propertes的信息
    user = properties.getProperty("bintray.user")
    key = properties.getProperty("bintray.apikey")
    publish = true
    configurations = ['archives']
    pkg {
        //填入 bintray 上对应的 package 信息
        repo = 'maven'
        name = 'RvAdapter'
        vcsUrl = 'https://github.com/sswukang/RvAdapter.git'
        websiteUrl = 'https://github.com/sswukang/RvAdapter'
        licenses = ['Apache-2.0']
        issueTrackerUrl = 'https://github.com/sswukang/RvAdapter/issues'
        publicDownloadNumbers = true
        version {
            name = '1.0'
            desc = '1.0 release'
            released = new Date()
            vcsTag = '1.3.0'
            attributes = ['gradle-plugin': 'com.use.less:com.use.less.gradle:gradle-useless-plugin']
        }
    }
}

/*--------------------- 增加注释文档(jitpack.io) ------------------------*/
// build a jar with source files
task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    failOnError false
    source = android.sourceSets.main.java.sourceFiles
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    classpath += configurations.compile
}

// build a jar with javadoc
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

task findConventions << {
    println project.getConvention()
}
